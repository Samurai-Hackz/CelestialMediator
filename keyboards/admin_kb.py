from aiogram.dispatcher.filters import Text

from database.sqlite_db import admin_info_add, admin_info_del, admin_info_sel
from states.class_states import AdminInfo, AdminDel

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ParseMode, InputMediaPhoto

from create_bot import dp, bot
from aiogram import types

from database import sqlite_db
from keyboards import goods_add_kb
from states.class_states import AbUs


cancel_all_states = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
cancel_all_states.add(InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', callback_data="cancel_state_admin"))


admin_info_panel = InlineKeyboardMarkup(row_width=1)
admin_info_panel_kb = [
    [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='admin_add'),
     InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='admin_del')],
    [InlineKeyboardButton('–í—Å–µ –∞–¥–º–∏–Ω—ã', callback_data='admin_all')],
    [InlineKeyboardButton('–ù–∞–∑–∞–¥ Ô∏è‚óÄÔ∏èÔ∏è', callback_data='admin_back')]
]
for button_row in admin_info_panel_kb:
    admin_info_panel.row(*button_row)


abus_kb = InlineKeyboardMarkup(row_width=2)
admin_panel_kb = InlineKeyboardButton('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_panel_kb')
admin_panel_kb1 = InlineKeyboardButton('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—ã', callback_data='start_kb1')
admin_panel_kb2 = InlineKeyboardButton('–û –Ω–∞—Å ‚ÑπÔ∏è', callback_data='start_kb2')
admin_panel_kb3 = InlineKeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ üõí', callback_data='start_kb3')
admin_panel_kb4 = InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úç', callback_data='start_kb4')
admin_panel_kb5 = InlineKeyboardButton(text='–ë–∞–ª–∞–Ω—Å üí∞', callback_data='start_kb5')
abus_kb.add(admin_panel_kb1)
abus_kb.add(admin_panel_kb2, admin_panel_kb3)
abus_kb.add(admin_panel_kb4, admin_panel_kb5)
abus_kb.add(admin_panel_kb)


@dp.callback_query_handler(lambda c: c.data == 'admin_panel_kb')
async def admin_panel_callback(call: types.CallbackQuery):
    await call.answer('–í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
    with open('img/admin-panel.jpg', 'rb') as admin_panel_photo:
        media_admin_panel = InputMediaPhoto(admin_panel_photo, caption='<b>–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è:</b>', parse_mode=ParseMode.HTML)
        await bot.edit_message_media(media_admin_panel, call.message.chat.id, call.message.message_id,
                                     reply_markup=admin_panel_browser)


admin_panel_browser = InlineKeyboardMarkup(row_width=2)
admin_panel_browser_kb = [
    InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ', callback_data='admin_panel_browser_kb1'),
    InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å "–û –ù–ê–°"', callback_data='admin_panel_browser_kb2'),
    InlineKeyboardButton('–¢–æ–≤–∞—Ä —É–¥–∞–ª–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å', callback_data='admin_panel_browser_kb3'),
    InlineKeyboardButton('–ê–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å', callback_data='admin_panel_browser_kb4'),
    InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data='abouts_us_back_kb1')
]
admin_panel_browser.add(*admin_panel_browser_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('admin_panel_browser_'))
async def admin_panel_options(call: types.CallbackQuery):
    admin_options = call.data.split('_')[3]

    if admin_options == 'kb1':
        from handlers import admin

        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É')
        message = call.message
        await admin.mailing(message)
    elif admin_options == 'kb2':
        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏, –∏–∑–º–µ–Ω–∏—Ç—å "–û –ù–ê–°"')
        await call.message.reply('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ :</b>', parse_mode=ParseMode.HTML,
                                 reply_markup=about_us)
    elif admin_options == 'kb3':
        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
        await call.message.reply('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ :</b>', parse_mode=ParseMode.HTML,
                                 reply_markup=goods_add_kb.goods_info)
    elif admin_options == 'kb4':
        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        await call.message.reply('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ :</b>', parse_mode=ParseMode.HTML,
                                 reply_markup=admin_info_panel)


@dp.callback_query_handler(lambda c: c.data.startswith('admin_'))
async def admin_info_tasks(call: types.CallbackQuery):
    admin_task = call.data.split('_')[1]

    if admin_task == 'add':
        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')
        await AdminInfo.admin_id.set()
        await call.message.reply('<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∞</b>', parse_mode=ParseMode.HTML, reply_markup=cancel_all_states)
    elif admin_task == 'del':
        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
        await call.message.reply('<b>–í–≤–µ–¥–∏—Ç–µ <b>USERNAME</b> –∞–¥–º–∏–Ω–∞</b>', parse_mode=ParseMode.HTML)

        await AdminDel.admin_id.set()
    elif admin_task == 'all':
        await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤')
        await admin_info_sel(call.message)


@dp.message_handler(state=AdminDel.admin_id)
async def admin_del_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['admin_id'] = message.text

    admin_del = await state.get_data()
    admin_id_del = admin_del.get('admin_id')

    if not admin_id_del.startswith('@'):
        admin_id_del = '@' + admin_id_del

    await admin_info_del(admin_id=admin_id_del)
    await message.reply(f'<b><i>{admin_id_del}</i> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ ‚úÖ</b>', parse_mode=ParseMode.HTML)
    await state.finish()


@dp.message_handler(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', state="*")
@dp.message_handler(Text(equals='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', ignore_case=True), state="*")
async def cancel_admin_state(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, '<b>–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ <i>—Å–æ–¥–µ–π—Å—Ç–≤–∏—è</i></b>',
                           parse_mode=ParseMode.HTML)
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()


@dp.message_handler(state=AdminInfo.admin_id)
async def admin_id_set(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['admin_id'] = message.text
    await message.reply('<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <i>USERNAME</i> –∞–¥–º–∏–Ω–∞</b>', parse_mode=ParseMode.HTML)
    await AdminInfo.next()


@dp.message_handler(state=AdminInfo.admin_username)
async def admin_user_set(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['admin_username'] = message.text

    admin_info = await state.get_data()
    admin_id = admin_info.get('admin_id', None)
    admin_username = admin_info.get('admin_username')

    if not admin_username.startswith('@'):
        admin_username = '@' + admin_username

    await admin_info_add(admin_id, admin_username)
    await message.reply('<b>–î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ <i>–±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ –ë–î</i></b>', parse_mode=ParseMode.HTML)
    await state.finish()


about_us = InlineKeyboardMarkup(row_width=2)
about_us_kb1 = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å', callback_data='about_us_kb1')
about_us_kb2 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='about_us_kb2')
about_us.add(about_us_kb1, about_us_kb2)

abouts_us_back = InlineKeyboardMarkup(row_width=2)
abouts_us_back.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üè†', callback_data='abouts_us_back_kb1'))


@dp.callback_query_handler(text='abouts_us_back_kb1')
async def abouts_us_back_call(call: types.CallbackQuery):
    from handlers.client import start

    message = call.message
    await start(message)


@dp.callback_query_handler(text='about_us_kb1')
async def about_us_kb1_callback(call: types.CallbackQuery):
    await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å')
    await bot.send_message(call.message.chat.id,
                           '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–æ—Ç–∞</b>',
                           parse_mode=ParseMode.HTML)
    await AbUs.abus_info.set()


@dp.message_handler(state=AbUs.abus_info)
async def abus_gotten(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['abus_info'] = message.html_text

    abus_info_get = await state.get_data()
    abus_infos = abus_info_get.get('abus_info')

    await bot.send_message(message.chat.id, '<b>–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>', parse_mode=ParseMode.HTML, reply_markup=abouts_us_back)

    await state.finish()
    await sqlite_db.abus_sql(abus_infos)


@dp.callback_query_handler(text='about_us_kb2')
async def about_us_del(call: types.CallbackQuery):
    print("Callback 'about_us_kb2' triggered")
    await call.answer('–í—ã –Ω–∞–∂–∞–ª–∏ —É–¥–∞–ª–∏—Ç—å –æ —Å–µ–±–µ')
    await bot.send_message(call.message.chat.id, '<b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ <i>–ë–î</i> –±—ã–ª–∏ <i>—É—Å–ø–µ—à–Ω–æ —Å—Ç—ë—Ä—Ç—ã</i></b>', parse_mode=ParseMode.HTML, reply_markup=abouts_us_back)
    await sqlite_db.del_abus_sql()


@dp.callback_query_handler(lambda c: c.data.startswith('part_'))
async def part_process_callback(call: types.CallbackQuery):
    part_type = call.data.split('_')[1]

    if part_type == 'periphery':
        await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏:</b>', parse_mode=ParseMode.HTML, reply_markup=type_of_element_periphery)
    elif part_type == 'components':
        await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:</b>', parse_mode=ParseMode.HTML, reply_markup=type_of_element_components)
    elif part_type == 'decor':
        await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–∫–æ—Ä–∞:</b>', parse_mode=ParseMode.HTML, reply_markup=type_of_element_decor)
    else:
        await call.message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type_of_element_goods = InlineKeyboardMarkup(row_width=2)
type_of_element_goods_buttons = [
    InlineKeyboardButton('–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è', callback_data='part_periphery'),
    InlineKeyboardButton('–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ', callback_data='part_components'),
    InlineKeyboardButton('–î—ç–∫–æ—Ä', callback_data='part_decor')
]
type_of_element_goods.add(*type_of_element_goods_buttons)


type_of_element_components = InlineKeyboardMarkup(row_width=2)
type_of_element_components_buttons = [
    InlineKeyboardButton('–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã', callback_data='type_mb'),
    InlineKeyboardButton('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã', callback_data='type_cpu'),
    InlineKeyboardButton('–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è', callback_data='type_psu'),
    InlineKeyboardButton('–û–ó–£', callback_data='type_ram'),
    InlineKeyboardButton('–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', callback_data='type_gpu'),
    InlineKeyboardButton('SSD-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏', callback_data='type_ssd'),
    InlineKeyboardButton('–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏', callback_data='type_hdd'),
    InlineKeyboardButton('–ö—É–ª–µ—Ä–∞', callback_data='type_cooler'),
    InlineKeyboardButton('–ù–∞–∑–∞–¥ Ô∏è‚óÄÔ∏è', callback_data='type_back')
]
type_of_element_components.add(*type_of_element_components_buttons)


type_of_element_periphery = InlineKeyboardMarkup(row_width=2)
type_of_element_periphery_buttons = [
    InlineKeyboardButton('–ú–æ–Ω–∏—Ç–æ—Ä—ã', callback_data='type_scr'),
    InlineKeyboardButton('–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã', callback_data='type_kb'),
    InlineKeyboardButton('–ú—ã—à–∫–∏', callback_data='type_ms'),
    InlineKeyboardButton('–ö–æ–≤—Ä–∏–∫–∏', callback_data='type_crpt'),
    InlineKeyboardButton('–ù–∞—É—à–Ω–∏–∫–∏', callback_data='type_hdp'),
    InlineKeyboardButton('–ö–æ—Ä–ø—É—Å–∞', callback_data='type_corpus'),
    InlineKeyboardButton('–ù–∞–∑–∞–¥ Ô∏è‚óÄÔ∏è', callback_data='type_back')
]
type_of_element_periphery.add(*type_of_element_periphery_buttons)


type_of_element_decor = InlineKeyboardMarkup(row_width=2)
type_of_element_decor_buttons = [
    InlineKeyboardButton('–ü–æ–¥—Å–≤–µ—Ç–∫–∏', callback_data='type_light'),
    InlineKeyboardButton('–õ–∞–º–ø—ã', callback_data='type_lamp'),
    InlineKeyboardButton('–ü–ª–∞–∫–∞—Ç', callback_data='type_poster'),
    InlineKeyboardButton('–ò–≥—Ä—É—à–∫–∏', callback_data='type_toys'),
    InlineKeyboardButton('–ù–∞–∑–∞–¥ Ô∏è‚óÄÔ∏è', callback_data='type_back'),
]
type_of_element_decor.add(*type_of_element_decor_buttons)
